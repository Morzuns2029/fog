
#Requires AutoHotkey v2.0
#SingleInstance Force

clickerScriptURL := "https://raw.githubusercontent.com/Morzuns2029/fog/main/clicker.ahk"
clickerScriptFile := "clicker.ahk"
hwidFile := "activated_hwid.txt"
thisHWID := GetHWID()
webhook := "https://discord.com/api/webhooks/1375531765111980112/-NjswCv3DtJKL2Z60Fq3IMCXwWALSkWZyib0DaRMjK9ptUIkUiQ-9NK3Un1jKxRsfJkW"

global panel

ShowAdminPanel() {
    global panel
    panel := Gui("+AlwaysOnTop", "Панель пользователя")
    activated := false

    if FileExist(hwidFile) {
        if InStr(FileRead(hwidFile), thisHWID)
            activated := true
    }

    panel.AddText(, "Добро пожаловать!")

    if !activated {
        panel.AddText(, "Введите ключ для активации:")
        keyInput := panel.AddEdit("w200")
        panel.AddButton("w200", "✅ Активировать").OnEvent("Click", (*) => ActivateKey(keyInput.Value))
    }

    panel.AddButton("w200", "⚙ Настройки", (*) => MsgBox("Настройки ещё не реализованы"))
    panel.AddButton("w200", "🚀 Запустить скрипт").OnEvent("Click", (*) => LaunchScript())
    panel.AddButton("w200", "♻ Сбросить HWID").OnEvent("Click", (*) => (panel.Destroy(), ResetHWID(), ShowAdminPanel()))
    panel.AddButton("w200", "❌ Выход").OnEvent("Click", (*) => ExitApp())
    panel.Show("w230")
}

ActivateKey(key) {
    key := Trim(key)
    if key = "" {
        MsgBox "Введите ключ!"
        return
    }

    try {
        http := ComObject("WinHttp.WinHttpRequest.5.1")
        http.Open("GET", "https://raw.githubusercontent.com/Morzuns2029/fog/main/valid_keys.txt", false)
        http.Send()
        if (http.Status != 200) {
            MsgBox "Ошибка загрузки ключей: " http.Status
            return
        }
        keyList := http.ResponseText
    } catch {
        MsgBox "Ошибка загрузки ключей!"
        return
    }

    validLines := StrSplit(keyList, "`n", "`r")
    found := false

    for i, line in validLines {
        parts := StrSplit(Trim(line), "|")
        if parts.Length = 2 {
            keyPart := Trim(parts[1])
            status := Trim(parts[2])
            if keyPart = key && status = "unused" {
                found := true
                break
            }
        }
    }

    if !found {
        MsgBox "❌ Ключ неверный или уже использован!"
        return
    }

    FileAppend(thisHWID "`n", hwidFile)
    SendWebhook(key)
    MsgBox "✅ Ключ активирован!"
    panel.Destroy()
    ShowAdminPanel()
}

SendWebhook(key) {
    json := "{""content"":""✅ Новый ключ активирован!\nКлюч: " key "\nHWID: " thisHWID "\nВремя: " A_Now """}"
    http := ComObject("WinHttp.WinHttpRequest.5.1")
    http.Open("POST", webhook, false)
    http.SetRequestHeader("Content-Type", "application/json")
    http.Send(json)
}

LaunchScript() {
    if FileExist(hwidFile) && InStr(FileRead(hwidFile), thisHWID) {
        panel.Destroy()
        try {
            http := ComObject("WinHttp.WinHttpRequest.5.1")
            http.Open("GET", clickerScriptURL, false)
            http.Send()
            if (http.Status != 200) {
                MsgBox "Ошибка загрузки кликера: " http.Status
                return
            }
            FileOpen(clickerScriptFile, "w").Write(http.ResponseText)
        } catch {
            MsgBox "Ошибка скачивания кликера!"
            return
        }

        Run clickerScriptFile
        ExitApp
    } else {
        MsgBox "Сначала активируйте скрипт ключом!"
    }
}

ResetHWID() {
    if !FileExist(hwidFile) {
        MsgBox "Файл HWID не найден!"
        return
    }
    lines := StrSplit(FileRead(hwidFile), "`n")
    newLines := []
    for line in lines {
        if Trim(line) != thisHWID
            newLines.Push(line)
    }
    FileDelete(hwidFile)
    FileAppend(Join("`n", newLines), hwidFile)
    MsgBox "✅ HWID сброшен!"
}

GetHWID() {
    RunWait("cmd /c wmic csproduct get uuid > hwid.tmp", , "Hide")
    hwid := Trim(FileRead("hwid.tmp"))
    FileDelete("hwid.tmp")
    return StrReplace(hwid, "UUID", "")
}

ShowAdminPanel()
